import cv2
import numpy as np

# Function to find intersection point of two lines
def intersection(line1, line2):
    xdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])
    ydiff = (line1[0][1] - line1[1][1], line2[0][1] - line2[1][1])

    def det(a, b):
        return a[0] * b[1] - a[1] * b[0]

    div = det(xdiff, ydiff)
    if div == 0:
        return None

    d = (det(*line1), det(*line2))
    x = det(d, xdiff) / div
    y = det(d, ydiff) / div
    return int(x), int(y)

# Open the video file
vid = cv2.VideoCapture("IMG_6818.mov")

# Check if the video file is opened correctly
if not vid.isOpened():
    raise IOError("Cannot open video file")

# Get the video resolution
width = int(vid.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(vid.get(cv2.CAP_PROP_FRAME_HEIGHT))
print("Video resolution:", width, "x", height)

# Set the initial window size
window_width = 800  # Adjust as needed
window_height = int(window_width * height / width)

# Calculate the x-coordinate for the top vertex (average of the bottom two points)
top_x = (width // 2 - 800 + width // 2 + 1300) / 2

# Define the vertices of the triangle mask
triangle_vertices = np.array([[top_x - 125, 1000],  # Top vertex
                               [width // 2 - 1100, height - 100],  # Bottom left vertex
                               [width // 2 + 1300, height - 100]  # Bottom right vertex
                               ])

# Load the image to be placed in the top left corner and resize it to match the region size
download_img = cv2.imread("download.jpg")
download_img = cv2.resize(download_img, (255, 255))

# Streams the video
while True:
    ret, img = vid.read()

    if not ret:
        break

    # Convert the image to grayscale
    imgray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Perform Canny edge detection
    edges = cv2.Canny(imgray, 50, 150, apertureSize=3)

    # Create a triangle mask
    mask = np.zeros(edges.shape[:2], np.uint8)
    cv2.fillPoly(mask, [triangle_vertices.astype(int)], (255))

    # Make the mask blue
    mask_blue = cv2.merge([np.zeros_like(mask), np.zeros_like(mask), mask])

    # Apply the mask
    res = cv2.bitwise_and(edges, edges, mask=mask)

    # Detect lines using HoughLinesP
    lines = cv2.HoughLinesP(
        res,  # Input edge image
        1,  # Distance resolution in pixels
        np.pi / 180,  # Angle resolution in radians
        threshold=10,  # Min number of votes for valid line
        minLineLength=50,  # Min allowed length of line
        maxLineGap=100  # Max allowed gap between line for joining them
    )

    # Define variables for the outer lines of the lane
    left_lane_line = None
    right_lane_line = None

    if lines is not None:
        # Iterate through detected lines
        for line in lines:
            x1, y1, x2, y2 = line[0]

            # Calculate slope and intercept of the line
            slope = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')
            intercept = y1 - slope * x1

            # Filter lines based on slope and position
            if slope < -0.5 and x1 < width // 2:  # Left lane line
                if left_lane_line is None or x1 < left_lane_line[0][0]:
                    left_lane_line = ((x1, y1), (x2, y2))
            elif slope > 0.5 and x1 > width // 2:  # Right lane line
                if right_lane_line is None or x1 > right_lane_line[0][0]:
                    right_lane_line = ((x1, y1), (x2, y2))

    # Find midline
    mid_line = ((left_lane_line[0][0] + right_lane_line[0][0]) // 2,
                (left_lane_line[0][1] + right_lane_line[0][1]) // 2), \
               ((left_lane_line[1][0] + right_lane_line[1][0]) // 2,
                (left_lane_line[1][1] + right_lane_line[1][1]) // 2)

    # Draw the left lane line
    if left_lane_line is not None:
        cv2.line(mask_blue, left_lane_line[0], left_lane_line[1], (255, 0, 0), thickness=6)

    # Draw the right lane line
    if right_lane_line is not None:
        cv2.line(mask_blue, right_lane_line[0], right_lane_line[1], (255, 0, 0), thickness=6)

    # Draw the mid line
    if mid_line is not None:
        cv2.line(mask_blue, mid_line[0], mid_line[1], (0, 255, 0), thickness=6)

    # Overlay the blue mask onto the original image
    img = cv2.addWeighted(img, 0.7, mask_blue, 0.3, 0)

    # Add "download.jpg" image in the top left corner
    img[:255, :255] = download_img

    # Resize the image to fit the window
    img = cv2.resize(img, (window_width, window_height))

    k = cv2.waitKey(10)
    if k == 27:
        break
    cv2.imshow("masked frame", img)

vid.release()
cv2.destroyAllWindows()
